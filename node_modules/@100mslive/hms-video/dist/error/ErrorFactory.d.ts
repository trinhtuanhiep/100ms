import { HMSAction } from './HMSAction';
import { HMSException } from './HMSException';
import { HMSSignalMethod } from '../signal/jsonrpc/models';
export declare const ErrorFactory: {
    WebSocketConnectionErrors: {
        FailedToConnect(action: HMSAction, description?: string): HMSException;
        WebSocketConnectionLost(action: HMSAction, description?: string): HMSException;
        AbnormalClose(action: HMSAction, description?: string): HMSException;
    };
    APIErrors: {
        ServerErrors(code: number, action: HMSAction, description?: string, isTerminal?: boolean): HMSException;
        EndpointUnreachable(action: HMSAction, description?: string): HMSException;
        InvalidTokenFormat(action: HMSAction, description?: string): HMSException;
        InitConfigNotAvailable(action: HMSAction, description?: string): HMSException;
    };
    TracksErrors: {
        GenericTrack(action: HMSAction, description?: string): HMSException;
        CantAccessCaptureDevice(action: HMSAction, deviceInfo: string, description?: string): HMSException;
        DeviceNotAvailable(action: HMSAction, deviceInfo: string, description?: string): HMSException;
        DeviceInUse(action: HMSAction, deviceInfo: string, description?: string): HMSException;
        DeviceLostMidway(action: HMSAction, deviceInfo: string, description?: string): HMSException;
        NothingToReturn(action: HMSAction, description?: string, message?: string): HMSException;
        InvalidVideoSettings(action: HMSAction, description?: string): HMSException;
        AutoplayBlocked(action: HMSAction, description?: string): HMSException;
        CodecChangeNotPermitted(action: HMSAction, description?: string): HMSException;
        OverConstrained(action: HMSAction, deviceInfo: string, description?: string): HMSException;
        NoAudioDetected(action: HMSAction, description?: string): HMSException;
        SystemDeniedPermission(action: HMSAction, deviceInfo: string, description?: string): HMSException;
        CurrentTabNotShared(): HMSException;
        AudioPlaybackError(description: string): HMSException;
    };
    WebrtcErrors: {
        CreateOfferFailed(action: HMSAction, description?: string): HMSException;
        CreateAnswerFailed(action: HMSAction, description?: string): HMSException;
        SetLocalDescriptionFailed(action: HMSAction, description?: string): HMSException;
        SetRemoteDescriptionFailed(action: HMSAction, description?: string): HMSException;
        ICEFailure(action: HMSAction, description?: string): HMSException;
        ICEDisconnected(action: HMSAction, description?: string): HMSException;
        StatsFailed(action: HMSAction, description?: string): HMSException;
    };
    WebsocketMethodErrors: {
        ServerErrors(code: number, action: HMSAction | HMSSignalMethod, description: string): HMSException;
        AlreadyJoined(action: HMSAction, description?: string): HMSException;
        CannotJoinPreviewInProgress(action: HMSAction, description?: string): HMSException;
    };
    GenericErrors: {
        NotConnected(action: HMSAction, description?: string): HMSException;
        Signalling(action: HMSAction, description: string): HMSException;
        Unknown(action: HMSAction, description: string): HMSException;
        NotReady(action: HMSAction, description?: string): HMSException;
        JsonParsingFailed(action: HMSAction, jsonMessage: string, description?: string): HMSException;
        TrackMetadataMissing(action: HMSAction, description?: string): HMSException;
        RTCTrackMissing(action: HMSAction, description?: string): HMSException;
        PeerMetadataMissing(action: HMSAction, description?: string): HMSException;
        ValidationFailed(message: string, entity?: any): HMSException;
        InvalidRole(action: HMSAction, description: string): HMSException;
        PreviewAlreadyInProgress(action: HMSAction, description?: string): HMSException;
        MissingMediaDevices(): HMSException;
        MissingRTCPeerConnection(): HMSException;
    };
    MediaPluginErrors: {
        PlatformNotSupported(action: HMSAction, description?: string): HMSException;
        InitFailed(action: HMSAction, description?: string): HMSException;
        ProcessingFailed(action: HMSAction, description?: string): HMSException;
        AddAlreadyInProgress(action: HMSAction, description?: string): HMSException;
        DeviceNotSupported(action: HMSAction, description?: string): HMSException;
    };
    PlaylistErrors: {
        NoEntryToPlay(action: HMSAction, description: string): HMSException;
        NoEntryPlaying(action: HMSAction, description: string): HMSException;
    };
};
