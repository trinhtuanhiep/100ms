import { HMSPeer, HMSRoleName } from '@100mslive/hms-video-store';
export interface useParticipantsResult {
    /**
     * list of participants that match the given filters
     */
    participants: HMSPeer[];
    /**
     * Total number of participants in the room
     */
    peerCount: number;
    /**
     * is joined in the room
     */
    isConnected: boolean;
    /**
     * role names with at least one participant present with that role
     */
    rolesWithParticipants: HMSRoleName[];
}
export declare type useParticipantsParams = {
    /** To filter by particular role */
    role: HMSRoleName;
    /**
     * To filter by particular by metadata. only supports `{ isHandRaised: true }` for now
     * @beta
     */
    metadata: Record<string, any>;
    /** To filter by name/role (partial match) */
    search: string;
};
/**
 * This can be used to get the total count of participants in the room, participants
 * filtered by role or metadata with isHandRaised or the entire participants if no params are passed
 * @param {useParticipantsParams} params
 * @returns {useParticipantsResult}
 */
export declare const useParticipants: (params?: useParticipantsParams) => {
    participants: HMSPeer[];
    isConnected: boolean | undefined;
    peerCount: number;
    rolesWithParticipants: (string | undefined)[];
};
