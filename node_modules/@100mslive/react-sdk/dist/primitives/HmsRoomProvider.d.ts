import React, { PropsWithChildren } from 'react';
import { HMSActions, HMSGenericTypes, HMSNotificationInCallback, HMSNotifications, HMSNotificationTypeParam, HMSStatsStore, HMSStatsStoreWrapper, HMSStore, HMSStoreWrapper } from '@100mslive/hms-video-store';
import { HMSContextProviderProps } from './store';
export interface HMSRoomProviderProps<T extends HMSGenericTypes> {
    actions?: HMSActions<T>;
    store?: HMSStoreWrapper<T>;
    notifications?: HMSNotifications;
    stats?: HMSStatsStoreWrapper;
    /**
     * if true this will enable webrtc stats collection
     */
    isHMSStatsOn?: boolean;
    leaveOnUnload?: boolean;
}
/**
 * top level wrapper for using react sdk hooks. This doesn't have any mandatory arguments, if you are already
 * initialising the sdk on your side, you can pass in the primitives from there as well to use hooks for
 * react part of your code.
 * @constructor
 */
export declare const HMSRoomProvider: <T extends HMSGenericTypes = {
    sessionStore: Record<string, any>;
}>({ children, actions, store, notifications, stats, isHMSStatsOn, leaveOnUnload, }: React.PropsWithChildren<HMSRoomProviderProps<T>>) => React.FunctionComponentElement<React.ProviderProps<HMSContextProviderProps | null>>;
/**
 * `useHMSStore` is a read only hook which can be passed a selector to read data.
 * The hook can only be used in a component if HMSRoomProvider is present in its ancestors.
 */
export declare const useHMSStore: <StateSlice>(selector: import("zustand").StateSelector<HMSStore<{
    sessionStore: Record<string, any>;
}>, StateSlice>, equalityFn?: import("zustand").EqualityChecker<StateSlice>) => StateSlice;
export declare const useHMSStatsStore: <StateSlice>(selector: import("zustand").StateSelector<HMSStatsStore, StateSlice>, equalityFn?: import("zustand").EqualityChecker<StateSlice>) => StateSlice | undefined;
/**
 * `useHMSVanillaStore` is a read only hook which returns the vanilla HMSStore.
 * Usage:
 * ```
 * const hmsStore = useHMSVanillaStore();
 * const dominantSpeaker = hmsStore.getState(selectDominantSpeaker);
 * ```
 *
 * Note: There's no need to use the vanilla hmsStore in React components.
 * This is used in rare cases where the store needs to be accessed outside a React component.
 * For almost every case, `useHMSStore` would get the job done.
 */
export declare const useHMSVanillaStore: () => import("./store").IHMSReactStore<HMSStore<{
    sessionStore: Record<string, any>;
}>>;
export declare const useHMSVanillaNotifications: () => HMSNotifications | undefined;
export declare const useHMSActions: () => HMSActions<{
    sessionStore: Record<string, any>;
}>;
/**
 * `useHMSNotifications` is a read only hook which gives the latest notification(HMSNotification) received.
 * @param type can be a string or an array of string for the types of notifications to listen to. If an array is passed
 * either declare it outside the functional component or use a useMemo to make sure its reference stays same across
 * rerenders for performance reasons.
 */
export declare const useHMSNotifications: <T extends HMSNotificationTypeParam>(type?: T | undefined) => HMSNotificationInCallback<T> | null;
export declare const useIsHMSStatsOn: () => boolean;
